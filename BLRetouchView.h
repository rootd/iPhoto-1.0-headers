/*
 *     Generated by class-dump 3.1.2.
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2007 by Steve Nygard.
 */

#import "_ACAccountTypeIdentifierTwitter.h"

#import "UIGestureRecognizerDelegate-Protocol.h"

@class BLRepairLayerStack, BLRetouchController, BLRetouchLayerStack, BLRetouchMaskView, NSString, UIPanGestureRecognizer, UIPinchGestureRecognizer, UITapGestureRecognizer;

@interface BLRetouchView : _ACAccountTypeIdentifierTwitter <UIGestureRecognizerDelegate>
{
    BLRetouchMaskView *m_maskView;
    UIPanGestureRecognizer *m_panRecognizer;
    UIPanGestureRecognizer *m_paintRecognizer;
    UIPinchGestureRecognizer *m_pinchRecognizer;
    UITapGestureRecognizer *m_doubleTapRecognizer;
    UITapGestureRecognizer *m_redeyeTapRecognizer;
    int m_brushType;
    float m_brushSize;
    float m_brushSoftness;
    float m_brushOpacity;
    BOOL m_erase;
    BOOL m_brushSample;
    float m_scale;
    float m_minScale;
    float m_fitScale;
    float m_maxScale;
    float m_lastScale;
    BOOL m_allowLessThanFitScale;
    BOOL m_fitTimerWaiting;
    float m_initialScale;
    struct CGPoint m_lastBrushLocation;
    struct CGPoint m_startBrushLocation;
    BOOL m_showMask;
    BLRetouchLayerStack *m_layerStack;
    BLRepairLayerStack *m_repairLayerStack;
    BOOL m_bouncing;
    BOOL m_delayedEyeAnimation;
    struct CGPoint m_delayedEyeAnimationLocation;
    NSString *m_delayedEyeAnimationSoundName;
    BLRetouchController *m_controller;
}

- (void)setController:(id)fp8;
- (id)controller;
- (void)setMaxScale:(float)fp8;
- (float)maxScale;
- (void)setFitScale:(float)fp8;
- (float)fitScale;
- (void)setMinScale:(float)fp8;
- (float)minScale;
- (float)scale;
- (BOOL)showMask;
- (void)setBrushSample:(BOOL)fp8;
- (BOOL)brushSample;
- (void)setErase:(BOOL)fp8;
- (BOOL)erase;
- (void)setBrushOpacity:(float)fp8;
- (float)brushOpacity;
- (float)brushSoftness;
- (float)brushSize;
- (int)brushType;
- (id)repairLayerStack;
- (id)layerStack;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)fp8;
- (void)observeValueForKeyPath:(id)fp8 ofObject:(id)fp12 change:(id)fp16 context:(void *)fp20;
- (void)drawRect:(struct CGRect)fp8;
- (void)xuserDoubleTapped:(id)fp8;
- (void)userDoubleTapped:(id)fp8;
- (BOOL)gestureRecognizerShouldBegin:(id)fp8;
- (BOOL)gestureRecognizer:(id)fp8 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)fp12;
- (void)userPanned:(id)fp8;
- (void)userPinched:(id)fp8;
- (void)allowLessThanFit;
- (void)updateScaleTo:(float)fp8;
- (void)setCenterWithNewAnchorPoint:(struct CGPoint)fp8;
- (void)centerIfNeeded;
- (void)userTappedEyes:(id)fp8;
- (void)userPainted:(id)fp8;
- (void)drawBrushAtPoint:(struct CGPoint)fp8 erase:(BOOL)fp16 magicEdges:(BOOL)fp20 scale:(float)fp24;
- (void)showEyes;
- (void)showRedEyeAnimation:(BOOL)fp8 atLocation:(struct CGPoint)fp12;
- (void)showRedEyeAnimation:(BOOL)fp8 atLocation:(struct CGPoint)fp12 soundName:(id)fp20;
- (void)setEnableLayer:(BOOL)fp8;
- (BOOL)enableLayer;
- (void)setLayerAmount:(float)fp8;
- (float)layerAmount;
- (void)layerAmountWillChange;
- (void)setShowMask:(BOOL)fp8;
- (void)a_fillMask:(id)fp8;
- (void)a_clearMask:(id)fp8;
- (void)a_clearAllMasks:(id)fp8;
- (void)restoreAmount:(float)fp8 toLayer:(id)fp12;
- (void)restoreEyeTaps:(id)fp8 toLayer:(id)fp12;
- (void)restoreBrushStrokes:(id)fp8 toLayer:(id)fp12;
- (id)layerUndoStringWithPrefix:(id)fp8;
- (id)currentLayer;
- (id)layerForIndex:(int)fp8;
- (id)layerForBrushType:(int)fp8;
- (void)setWorkingTransforms:(struct CGAffineTransform)fp8;
- (id)sourceImage;
- (void)setSourceImage:(id)fp8 sourceScaleFactor:(float)fp12 completion:(id)fp(null);
- (void)setRepairStrokesDataDictionary:(id)fp8 andAnalysisImage:(id)fp12 andRepairImage:(id)fp16;
- (void)setRetouchStrokesDataDictionary:(id)fp8 andMaskImage:(id)fp12;
- (void)setRepairLayerStack:(id)fp8;
- (void)setLayerStack:(id)fp8;
- (float)effectiveBrushOpacity:(BOOL)fp8;
- (void)setBrushType:(int)fp8;
- (void)setBrushSoftness:(float)fp8;
- (void)setBrushSize:(float)fp8;
- (void)pinScale;
- (float)pinnedScale:(float)fp8;
- (void)setScale:(float)fp8;
- (void)setNeedsDisplay;
- (void)setNeedsDisplayInRect:(struct CGRect)fp8;
- (struct CGRect)flippedRect:(struct CGRect)fp8;
- (struct CGPoint)flippedPoint:(struct CGPoint)fp8;

@end

